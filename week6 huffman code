#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

// Define the structure for a Huffman Tree Node
struct Node {
    char ch;        // Character
    int freq;       // Frequency of the character
    Node *left, *right;  // Left and right children

    Node(char ch, int freq) {
        this->ch = ch;
        this->freq = freq;
        left = right = nullptr;
    }
};

// Comparison function to use in the priority queue
struct Compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

// Function to perform preorder traversal and print the Huffman codes
void preorderTraversal(Node* root, string code, unordered_map<char, string>& huffmanCodes) {
    if (root == nullptr) {
        return;
    }
    
    // If it's a leaf node, store the Huffman code
    if (!root->left && !root->right) {
        huffmanCodes[root->ch] = code;
    }

    // Traverse left and right subtrees with updated code
    preorderTraversal(root->left, code + "0", huffmanCodes);
    preorderTraversal(root->right, code + "1", huffmanCodes);
}

// Function to build the Huffman tree and print the Huffman codes
void buildHuffmanTree(string S, vector<int>& f) {
    // Priority queue to store the nodes based on frequency (Min-Heap)
    priority_queue<Node*, vector<Node*>, Compare> minHeap;

    // Create a node for each character and insert into the min-heap
    for (int i = 0; i < S.size(); i++) {
        minHeap.push(new Node(S[i], f[i]));
    }

    // Build the Huffman tree
    while (minHeap.size() > 1) {
        // Extract two nodes with the lowest frequency
        Node* left = minHeap.top();
        minHeap.pop();
        Node* right = minHeap.top();
        minHeap.pop();

        // Create a new internal node with the sum of the frequencies
        Node* newNode = new Node('\0', left->freq + right->freq);  // Internal node has no character
        newNode->left = left;
        newNode->right = right;

        // Insert the new node into the priority queue
        minHeap.push(newNode);
    }

    // The root of the Huffman tree
    Node* root = minHeap.top();

    // Map to store the Huffman codes
    unordered_map<char, string> huffmanCodes;

    // Perform preorder traversal to generate the Huffman codes
    preorderTraversal(root, "", huffmanCodes);

    // Print the Huffman codes in the preorder traversal order
    for (auto& pair : huffmanCodes) {
        cout << pair.second << " ";
    }
    cout << endl;
}

int main() {
    string S = "abcdef";
    vector<int> f = {5, 9, 12, 13, 16, 45};  // Frequencies corresponding to each character

    buildHuffmanTree(S, f);  // Build the Huffman tree and print the codes

    return 0;
}
