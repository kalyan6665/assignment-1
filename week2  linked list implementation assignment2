#include <iostream>
using namespace std;

// Structure to define a node in the linked list
struct SparseMatrixNode {
    int row;
    int col;
    int value;
    SparseMatrixNode* next;
};

// Class for Sparse Matrix representation using linked list
class SparseMatrix {
private:
    SparseMatrixNode* head;

public:
    SparseMatrix() : head(nullptr) {}

    // Insert a non-zero element into the linked list
    void insert(int row, int col, int value) {
        SparseMatrixNode* newNode = new SparseMatrixNode;
        newNode->row = row;
        newNode->col = col;
        newNode->value = value;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
        } else {
            SparseMatrixNode* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Display the sparse matrix in the format Row, Column, Value
    void display() {
        SparseMatrixNode* temp = head;
        cout << "Row\tColumn\tValue\n";
        while (temp != nullptr) {
            cout << temp->row << "\t" << temp->col << "\t" << temp->value << "\n";
            temp = temp->next;
        }
    }

    // Destructor to delete the linked list nodes
    ~SparseMatrix() {
        while (head != nullptr) {
            SparseMatrixNode* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    // Create an empty sparse matrix using linked list representation
    SparseMatrix mat;

    // Insert non-zero elements (row, column, value)
    mat.insert(0, 2, 3);
    mat.insert(0, 4, 4);
    mat.insert(1, 2, 5);
    mat.insert(1, 3, 7);
    mat.insert(3, 1, 2);
    mat.insert(3, 2, 6);

    // Display the sparse matrix
    mat.display();

    return 0;
}
