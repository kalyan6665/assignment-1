#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function to find the longest common substring
void longestCommonSubstring(const string& str1, const string& str2) {
    int m = str1.length();
    int n = str2.length();
    
    // Initialize a 2D table to store lengths of longest common suffixes
    vector<vector<int>> table(m + 1, vector<int>(n + 1, 0));
    int maxLength = 0;
    int endIndex = 0;  // To store the ending index of the longest substring in str1

    // Fill the table
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (str1[i - 1] == str2[j - 1]) {
                table[i][j] = table[i - 1][j - 1] + 1;
                
                // If we found a new longer substring
                if (table[i][j] > maxLength) {
                    maxLength = table[i][j];
                    endIndex = i - 1;  // Update the ending index
                }
            }
            // Print the current state of the table (for visualization)
            cout << table[i][j] << " ";
        }
        cout << endl;
    }

    // Print the longest common substring
    if (maxLength > 0) {
        string lcs = str1.substr(endIndex - maxLength + 1, maxLength);
        cout << "Longest Common Substring: " << lcs << endl;
        cout << "Length of Longest Common Substring: " << maxLength << endl;
    } else {
        cout << "No common substring found." << endl;
    }
}

int main() {
    string str1, str2;
    cout << "Enter first string: ";
    cin >> str1;
    cout << "Enter second string: ";
    cin >> str2;

    cout << "Input strings: " << endl;
    cout << "str1: " << str1 << endl;
    cout << "str2: " << str2 << endl;

    cout << "Dynamic Programming table (lookup table):" << endl;
    longestCommonSubstring(str1, str2);

    return 0;
}
