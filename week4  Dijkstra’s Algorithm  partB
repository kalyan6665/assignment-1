#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <map>
#include <algorithm>

using namespace std;

// Define a structure to represent the graph's edges
struct Edge {
    int destination;
    int weight;
};

// Define a structure to represent a node in the priority queue
struct Node {
    int vertex;
    int distance;

    bool operator>(const Node& other) const {
        return distance > other.distance;
    }
};

// Function to perform Dijkstra's algorithm
void dijkstra(const vector<vector<Edge>>& graph, int numNodes, int start, int end) {
    // Create a distance array to store the shortest distance from the start node
    vector<int> dist(numNodes, INT_MAX);
    dist[start] = 0;

    // Create an array to store the previous node in the shortest path
    vector<int> prev(numNodes, -1);

    // Min-heap (priority queue) to select the node with the smallest distance
    priority_queue<Node, vector<Node>, greater<Node>> pq;
    pq.push({start, 0});

    while (!pq.empty()) {
        Node current = pq.top();
        pq.pop();
        int u = current.vertex;

        // If we reach the destination node, stop the algorithm
        if (u == end) break;

        // Explore the neighbors of the current node
        for (const Edge& edge : graph[u]) {
            int v = edge.destination;
            int weight = edge.weight;

            // Relaxation step: Update the distance if a shorter path is found
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                prev[v] = u;
                pq.push({v, dist[v]});
            }
        }
    }

    // If the destination node is unreachable, print that there's no path
    if (dist[end] == INT_MAX) {
        cout << "No path exists from node " << start << " to node " << end << endl;
        return;
    }

    // Output the shortest distance
    cout << "Shortest distance from node " << start << " to node " << end << " is: " << dist[end] << endl;

    // Reconstruct the shortest path by following the 'prev' array
    vector<int> path;
    for (int v = end; v != -1; v = prev[v]) {
        path.push_back(v);
    }

    cout << "Shortest path: ";
    for (int i = path.size() - 1; i >= 0; --i) {
        cout << path[i] << " ";
    }
    cout << endl;
}

int main() {
    // Define number of nodes in the graph
    int numNodes = 6;

    // Define the graph as an adjacency list (hardcoded)
    vector<vector<Edge>> graph(numNodes);

    // Hardcoded edges (node1, node2, weight)
    graph[0].push_back({1, 10});
    graph[0].push_back({2, 5});
    graph[1].push_back({2, 2});
    graph[1].push_back({3, 1});
    graph[2].push_back({3, 9});
    graph[2].push_back({4, 2});
    graph[3].push_back({4, 4});

    // Taking user input for starting and ending nodes
    int start, end;
    cout << "Enter starting node: ";
    cin >> start;
    cout << "Enter ending node: ";
    cin >> end;

    // Run Dijkstra's algorithm and output the result
    dijkstra(graph, numNodes, start, end);

    return 0;
}
